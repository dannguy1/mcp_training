version: '3.8'

services:
  mcp-training:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-training-service
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - ./models:/app/models
      - ./exports:/app/exports
      - ./logs:/app/logs
      - ./config:/app/config
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network

  # Development service with hot reload
  mcp-training-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-training-dev
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=DEBUG
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=true
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./exports:/app/exports
      - ./logs:/app/logs
      - ./config:/app/config
    command: ["python", "-m", "uvicorn", "mcp_training.api.app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    restart: unless-stopped
    profiles:
      - dev
    networks:
      - mcp-network

  # Monitoring stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - mcp-network

  grafana:
    image: grafana/grafana:latest
    container_name: mcp-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    profiles:
      - monitoring
    networks:
      - mcp-network

volumes:
  prometheus_data:
  grafana_data:

networks:
  mcp-network:
    driver: bridge 